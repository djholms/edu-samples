Step-by-Step implementation:

#create cluster with nodes with 2CPU-2GB

gcloud container clusters create "k8s-cluster"  --zone "europe-west1-d" \
   --machine-type "custom-2-2048" --image-type "GCI" --disk-size "100" \
   --network "default" --enable-cloud-logging \
   --no-enable-cloud-monitoring --enable-autoscaling --min-nodes="2" --max-nodes="10" 

# Create Volume with ssd and PVC (Step 6)
kubectl apply -f ./taks1/ssd-storageclass.yaml
kubectl apply -f ./taks1/ssd-claim.yaml

# Create secret for Jenkins ( step 1)
kubectl apply -f ./taks1/secret-jenkins.yaml 

# Create configmap (step 2)
kubectl create configmap jenkins-plugins --from-file=./taks1/plugins.txt 

# checking
#    kubectl get configmaps
#    kubectl describe configmaps jenkins-pluggins
#

# Create Jenkins deployment
kubectl apply -f ./taks1/deployment-jenkins.yaml 

# Create service
kubectl apply -f ./taks1/service-jenkins.yaml

# Create LoadBalancer as temp solution 
kubectl expose deployment jenkins-deployment --type=LoadBalancer
===================================================================
# create Jenkins

# kubectl create ns jenkins



kubectl create -f jenkins-deployment.yaml
kubectl apply -f jenkins-deployment.yaml
kubectl get deployment
kubectl  describe deployments

#! Run service as load balancer
kubectl expose deployment jenkins-deployment --type=LoadBalancer
#kubectl create -f jenkins-service.yaml --type=LoadBalancer


# Step 1
# create secret 
kubectl apply -f ./taks1/secret_jenkins.txt

# Create configmap
kubectl create configmap jenkins-plugins --from-file=./taks1/plugins.txt 
kubectl get configmaps
kubectl describe configmaps jenkins-pluggins

