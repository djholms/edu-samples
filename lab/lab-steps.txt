Step-by-Step implementation:

##################################################################################################################################
# Step 0: Setup and destroy cluster

#Enable docker auth
gcloud auth configure-docker

# Destroy cluster
gcloud container clusters delete "k8s-cluster" --zone "europe-west1-d"

#Create cluster

gcloud container clusters create "k8s-cluster"  --zone "europe-west1-d" \
   --machine-type "custom-1-1536" --image-type "GCI" --disk-size "50" \
   --network "default" --enable-cloud-logging \
   --no-enable-cloud-monitoring --enable-autoscaling --min-nodes="2" --max-nodes="10" 

# Extend cluster with more powerfull nodes
gcloud container node-pools list --cluster="k8s-cluster" --zone "europe-west1-d"

gcloud container node-pools create high-mem --cluster=k8s-cluster --zone "europe-west1-d" --machine-type=custom-1-2048 --disk-size=50 --num-nodes=2
gcloud container node-pools create high-cpu --cluster=k8s-cluster --zone "europe-west1-d" --machine-type=custom-4-3840 --disk-size=50 --num-nodes=1

gcloud container node-pools list --cluster="k8s-cluster" --zone "europe-west1-d"

kubectl  get node  | nl

# create static IP for ingress
gcloud compute addresses create kubernetes-ingress --global


# Destroy more powerfull nodes
gcloud container node-pools delete high-mem --cluster=k8s-cluster --zone "europe-west1-d"
gcloud container node-pools delete high-cpu --cluster=k8s-cluster --zone "europe-west1-d"
##################################################################################################################################

# Step 6: Create PV and PVC
# Create Volume with ssd and PVC (Step 6)
kubectl apply -f ./manifests/ssd-storageclass.yaml
kubectl apply -f ./manifests/ssd-claim.yaml

##################################################################################################################################

# Step 1 and 2: Create secrets and configmaps:
# Create secret for Jenkins ( step 1)
kubectl apply -f ./manifests/secret-jenkins.yaml 

# Create configmaps (step 2 and 4.1)
kubectl create configmap jenkins-plugins --from-file=./manifests/plugins.txt 
kubectl create configmap jenkins-jobs --from-file=./manifests/job.spring-boot.config.xml --from-file=./manifests/job.spring-boot.config.xml

# checking
#    kubectl get configmaps
#    kubectl describe configmaps jenkins-plugins
#

# Create Jenkins deployment
kubectl apply -f ./manifests/deployment-jenkins.yaml 

# Create service
kubectl apply -f ./manifests/service-jenkins.yaml

# Create ingress
kubectl apply -f ./manifests/ingress-jenkins.yaml

===================================================================
##################################################################################################################################
# Step 4: 
# Configure jenkins
kubectl exec -it jenkins-deployment-  #bash
#get pass from 
cat /var/jenkins_home/secrets/initialAdminPassword

# set password
J3nk1n$M@$t3rP@$$

# Copy files from Kubernetes containers https://medium.com/@nnilesh7756/copy-directories-and-files-to-and-from-kubernetes-container-pod-19612fa74660 
kubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar 
===================================================================
##################################################################################################################################
# Step 4: Deploy Sonarqube

helm install sonarqube -f ./HELM/sonarqube.values.yaml stable/sonarqube

1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app=sonarqube,release=sonarqube-1580385452" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl port-forward $POD_NAME 8080:9000





# Create LoadBalancer as temp solution 
# kubectl expose deployment jenkins-deployment --type=LoadBalancer
===================================================================
# create Jenkins

# kubectl create ns jenkins



kubectl create -f jenkins-deployment.yaml
kubectl apply -f jenkins-deployment.yaml
kubectl get deployment
kubectl  describe deployments

#! Run service as load balancer
kubectl expose deployment jenkins-deployment --type=LoadBalancer
#kubectl create -f jenkins-service.yaml --type=LoadBalancer


# Step 1
# create secret 
kubectl apply -f ./manifests/secret_jenkins.txt

# Create configmap
kubectl create configmap jenkins-plugins --from-file=./manifests/plugins.txt 
kubectl get configmaps
kubectl describe configmaps jenkins-pluggins

